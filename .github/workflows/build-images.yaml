---
# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json

name: "Build Image"
on:
  workflow_call:
    inputs:
      matrix:
        required: false
        type: string
        default: "[]"
      publish:
        required: false
        type: boolean
        default: false

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  TEST_TAG: test

jobs:
  build-images:
    name: Build/Test ${{matrix.name}}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        name: ${{ fromJSON(inputs.matrix) }}
      max-parallel: 4
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: Test
        run: |
          echo ${{ matrix.name }}

      # Allow for more platforms to be built
      - name: Set up QEMU
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3

      # Set up BuildKit Docker container builder to be able to build
      # multi-platform images and export cache
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

      # Login against a Docker registry except on PR
      - name: Log into registry ${{ env.REGISTRY }}
        if: ${{ inputs.publish }}
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5.8.0
        with:
          images: ${{ env.REGISTRY }}/kusold/${{ matrix.name }}
          # Only generate version label when not publishing
          labels: |
            org.opencontainers.image.created
            org.opencontainers.image.description
            org.opencontainers.image.licenses
            org.opencontainers.image.revision
            org.opencontainers.image.source
            org.opencontainers.image.title
            org.opencontainers.image.url
            ${{ !inputs.publish && 'org.opencontainers.image.version' || '' }}

      # Add this new step to extract version when publishing
      - name: Extract Version from Dockerfile
        if: ${{ inputs.publish }}
        id: publish-tags
        run: |
          set -x # Enable debug mode to see each command as it's executed
          echo "Determing version for ${{ matrix.name }}"

          UPPER_NAME=$(echo "${{ matrix.name }}" | tr '[:lower:]' '[:upper:]' | tr '-' '_')

          echo "Looking for version with pattern: ARG ${UPPER_NAME}_VERSION="
          VERSION=$(grep -oP "(?<=ARG ${UPPER_NAME}_VERSION=)[\"']?\K[^\"']*(?=[\"']?)" apps/${{ matrix.name }}/Dockerfile || true)

          if [ -z "$VERSION" ]; then
            echo "The version isn't set. Checking if the image is debian based"

            VERSION=$(grep -m1 -oP '^(?!#).*FROM debian:\K[^[:space:]]*' apps/${{ matrix.name }}/Dockerfile || true)

            if [ -z "$VERSION" ]; then
              echo "Error: Could not find version in Dockerfile"
              exit 1
            fi

            # The version is set to the debian version
            echo "Found debian version ${VERSION}"
            MAJOR_VERSION=$(echo $VERSION | cut -d- -f1)  # gets 'bookworm'
            MAJOR_MINOR_VERSION=$VERSION                 # same as full version
          else
            # The version is specified as an arg
            MAJOR_VERSION=$(echo $VERSION | cut -d. -f1)
            MAJOR_MINOR_VERSION=$(echo $VERSION | cut -d. -f1,2)
          fi

          {
            echo "version=${VERSION}"
            echo "major=${MAJOR_VERSION}"
            echo "major_minor=${MAJOR_MINOR_VERSION}"

            echo "tags<<EOF"
            echo "${{ env.REGISTRY}}/${{github.repository_owner}}/${{ matrix.name }}:${MAJOR_VERSION}"
            echo "${{ env.REGISTRY}}/${{github.repository_owner}}/${{ matrix.name }}:${MAJOR_MINOR_VERSION}"
            echo "${{ env.REGISTRY}}/${{github.repository_owner}}/${{ matrix.name }}:${VERSION}"
            echo "EOF"

            echo "labels<<EOF"
            echo "${{ steps.meta.outputs.labels }}"
            echo "org.opencontainers.image.version=${VERSION}"
            echo "EOF"

          } >> $GITHUB_OUTPUT

      - name: Build the Docker image
        id: build-and-push
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        with:
          context: apps/${{ matrix.name }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          load: true # Outputs the built image so it can be used in other steps
          tags: ${{ matrix.name }}-${{ env.TEST_TAG }}

      - name: Test
        run: |
          docker run --rm ${{matrix.name}}-${{ env.TEST_TAG }} ${{matrix.name}} --help

      # The linux/amd64 image is only built once in this workflow.
      # The image is built once, and the following steps use the
      # internal cache from the first Build and push step. The
      # second Build and push step only builds linux/arm64.
      - name: Build and push
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        with:
          platforms: linux/amd64,linux/arm64
          push: ${{ inputs.publish }}
          context: apps/${{ matrix.name }}
          tags: ${{ inputs.publish && steps.publish-tags.outputs.tags || steps.meta.outputs.tags }}
          labels: ${{ inputs.publish && steps.publish-tags.outputs.labels || steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
